// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Nicknamezz00/go-microservice/internal/app/details"
	"github.com/Nicknamezz00/go-microservice/internal/app/details/controllers"
	grpc2 "github.com/Nicknamezz00/go-microservice/internal/app/details/grpc"
	"github.com/Nicknamezz00/go-microservice/internal/app/details/repositories"
	"github.com/Nicknamezz00/go-microservice/internal/app/details/services"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/app"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/config"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/consul"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/database"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/jaeger"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/log"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/transports/grpc"
	"github.com/Nicknamezz00/go-microservice/internal/pkg/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(f string) (*app.Application, error) {
	viper, err := config.NewViper(f)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	detailsOptions, err := details.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.NewDatabase(databaseOptions)
	if err != nil {
		return nil, err
	}
	detailsRepository := repositories.NewMySQLDetailsRepository(logger, db)
	detailsService := services.NewDetailsService(logger, detailsRepository)
	detailsController := controllers.NewDetailsController(logger, detailsService)
	initControllers := controllers.CreateInitControllers(detailsController)
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.NewJaeger(configuration)
	if err != nil {
		return nil, err
	}
	engine := http.NewRouter(httpOptions, logger, initControllers, tracer)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	client, err := consul.NewConsulClient(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.NewServer(httpOptions, logger, engine, client)
	if err != nil {
		return nil, err
	}
	serverOptions, err := grpc.NewServerOptions(viper)
	if err != nil {
		return nil, err
	}
	detailsServer, err := grpc2.NewDetailsServer(logger, detailsService)
	if err != nil {
		return nil, err
	}
	initServers := grpc2.CreateInitServers(detailsServer)
	grpcServer, err := grpc.NewServer(serverOptions, logger, initServers, client, tracer)
	if err != nil {
		return nil, err
	}
	application, err := details.NewApp(detailsOptions, logger, server, grpcServer)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, database.ProviderSet, services.ProviderSet, repositories.ProviderSet, consul.ProviderSet, jaeger.ProviderSet, http.ProviderSet, grpc2.ProviderSet, details.ProviderSet, controllers.ProviderSet, grpc.ProviderSet)
