// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	models "github.com/Nicknamezz00/go-microservice/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ReviewsService is an autogenerated mock type for the ReviewsService type
type ReviewsService struct {
	mock.Mock
}

// Query provides a mock function with given fields: productID
func (_m *ReviewsService) Query(productID uint64) ([]*models.Review, error) {
	ret := _m.Called(productID)

	var r0 []*models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*models.Review, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*models.Review); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewsService creates a new instance of ReviewsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewsService(t mockConstructorTestingTNewReviewsService) *ReviewsService {
	mock := &ReviewsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
