// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	models "github.com/Nicknamezz00/go-microservice/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// RatingsService is an autogenerated mock type for the RatingsService type
type RatingsService struct {
	mock.Mock
}

// Get provides a mock function with given fields: productID
func (_m *RatingsService) Get(productID uint64) (*models.Rating, error) {
	ret := _m.Called(productID)

	var r0 *models.Rating
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Rating, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Rating); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rating)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRatingsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRatingsService creates a new instance of RatingsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRatingsService(t mockConstructorTestingTNewRatingsService) *RatingsService {
	mock := &RatingsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
